language: generic
matrix:
   include:
      # Test Ubuntu Linux 14.04 / Swift 4.1.2
       - os: linux
         dist: trusty
         sudo: required
         env:
           - SWIFT_VERSION=swift-4.1.2-RELEASE
         install:
           - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then SWIFT_DIR=tests ; fi
           - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then mkdir $SWIFT_DIR ; fi
           - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then curl https://swift.org/builds/$SWIFT_VERSION/ubuntu1404/$SWIFT_VERSION/$SWIFT_VERSION-ubuntu14.04.tar.gz -s | tar xz -C $SWIFT_DIR &> /dev/null ; fi
         script: 
           - export PATH=$(pwd)/tests/$SWIFT_VERSION-ubuntu14.04/usr/bin:"${PATH}";
           - swift test
      # Test Ubuntu Linux 14.04 / Swift 5
       - os: linux
         dist: trusty
         sudo: required
         env:
           - SWIFT_VERSION=swift-5.0-RELEASE
         install:
           - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then SWIFT_DIR=tests ; fi
           - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then mkdir $SWIFT_DIR ; fi
           - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then curl https://swift.org/builds/$SWIFT_VERSION/ubuntu1404/$SWIFT_VERSION/$SWIFT_VERSION-ubuntu14.04.tar.gz -s | tar xz -C $SWIFT_DIR &> /dev/null ; fi
         script: 
           - export PATH=$(pwd)/tests/$SWIFT_VERSION-ubuntu14.04/usr/bin:"${PATH}";
           - swift test
      # Test Xcode 9.3 / Swift 4.1.0
       - os: osx
         osx_image: xcode9.3
      # Test Xcode 9.4.1 / Swift 4.1.2
       - os: osx
         osx_image: xcode9.4
      # Test Xcode 10 / Swift 4.2
       - os: osx
         osx_image: xcode10
      # Test Xcode 10.2 / Swift 5
       - os: osx
         osx_image: xcode10.2
addons:
  apt:
    packages:
    - clang
    - pkg-config
script:
  # Setup Linux environment
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sudo apt-get update ; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sudo apt-get install clang ; fi
  # Run Unit Tests
  - swift test
  # Compile with Xcode
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then cd Xcode ; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then xcodebuild clean test -scheme Bluetooth-macOS -sdk macosx -enableCodeCoverage YES; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then xcodebuild clean build -scheme Bluetooth-iOS; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then xcodebuild clean build -scheme Bluetooth-watchOS; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then xcodebuild clean build -scheme Bluetooth-tvOS; fi