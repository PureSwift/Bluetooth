name: Swift

on: [push, pull_request]

jobs:

    macOS-swift-51:
        name: macOS (Swift 5.1)
        runs-on: macOS-latest
        steps:
        - name: Checkout
          uses: actions/checkout@v1
        - name: Make Logs Directory
          run: mkdir logs
        - name: Xcode Version
          run: |
            sudo xcode-select -s /Applications/Xcode_11.3.1.app
            xcodebuild -version
            swift --version
        - name: Swift Version
          run: swift --version


    macOS-swift-52:
        name: macOS (Swift 5.2)
        runs-on: macOS-latest
        steps:
        - name: Checkout
          uses: actions/checkout@v1
        - name: Make Logs Directory
          run: mkdir logs
        - name: Xcode Version
          run: |
            sudo xcode-select -s /Applications/Xcode_11.4.app
            xcodebuild -version
            swift --version
        - name: Swift Version
          run: swift --version


    linux-swift-51:
        name: Linux (Swift 5.1)
        runs-on: ubuntu-18.04
        container: swift:5.1
        steps:
        - name: Checkout
          uses: actions/checkout@v1
        - name: Make Logs Directory
          run: mkdir logs
        - name: Swift Version
          run: swift --version


    linux-swift-52:
        name: Linux (Swift 5.2)
        runs-on: ubuntu-18.04
        container: swift:5.2.3-bionic
        steps:
        - name: Checkout
          uses: actions/checkout@v1
        - name: Make Logs Directory
          run: mkdir logs
        - name: Swift Version
          run: swift --version


    xcode-swift-51:
        name: Xcode (Swift 5.1)
        runs-on: macOS-latest
        steps:
        - name: Checkout
          uses: actions/checkout@v1
        - name: Make Logs Directory
          run: mkdir logs
        - name: Xcode Version
          run: |
            sudo xcode-select -s /Applications/Xcode_11.3.1.app
            xcodebuild -version
            swift --version
        - name: XC Pretty
          run: sudo gem install xcpretty-travis-formatter
        - name: Detect Workspace & Scheme (iOS)
          run: |
            WORKSPACE="Bluetooth.xcworkspace"
            if [[ ! -e "$WORKSPACE" ]]
            then
            WORKSPACE="."
            GOTPACKAGE=$(xcodebuild -workspace . -list | (grep Bluetooth-Package || true))
            if [[ $GOTPACKAGE != "" ]]
            then
            SCHEME="Bluetooth-Package"
            else
            SCHEME="Bluetooth"
            fi
            else
            SCHEME="Bluetooth-iOS"
            fi
            echo "set -o pipefail; export PATH='swift-latest:$PATH'; WORKSPACE='$WORKSPACE'; SCHEME='$SCHEME'" > setup.sh
        - name: Detect Workspace & Scheme (tvOS)
          run: |
            WORKSPACE="Bluetooth.xcworkspace"
            if [[ ! -e "$WORKSPACE" ]]
            then
            WORKSPACE="."
            GOTPACKAGE=$(xcodebuild -workspace . -list | (grep Bluetooth-Package || true))
            if [[ $GOTPACKAGE != "" ]]
            then
            SCHEME="Bluetooth-Package"
            else
            SCHEME="Bluetooth"
            fi
            else
            SCHEME="Bluetooth-tvOS"
            fi
            echo "set -o pipefail; export PATH='swift-latest:$PATH'; WORKSPACE='$WORKSPACE'; SCHEME='$SCHEME'" > setup.sh
        - name: Detect Workspace & Scheme (watchOS)
          run: |
            WORKSPACE="Bluetooth.xcworkspace"
            if [[ ! -e "$WORKSPACE" ]]
            then
            WORKSPACE="."
            GOTPACKAGE=$(xcodebuild -workspace . -list | (grep Bluetooth-Package || true))
            if [[ $GOTPACKAGE != "" ]]
            then
            SCHEME="Bluetooth-Package"
            else
            SCHEME="Bluetooth"
            fi
            else
            SCHEME="Bluetooth-watchOS"
            fi
            echo "set -o pipefail; export PATH='swift-latest:$PATH'; WORKSPACE='$WORKSPACE'; SCHEME='$SCHEME'" > setup.sh


    xcode-swift-52:
        name: Xcode (Swift 5.2)
        runs-on: macOS-latest
        steps:
        - name: Checkout
          uses: actions/checkout@v1
        - name: Make Logs Directory
          run: mkdir logs
        - name: Xcode Version
          run: |
            sudo xcode-select -s /Applications/Xcode_11.4.app
            xcodebuild -version
            swift --version
        - name: XC Pretty
          run: sudo gem install xcpretty-travis-formatter
        - name: Detect Workspace & Scheme (iOS)
          run: |
            WORKSPACE="Bluetooth.xcworkspace"
            if [[ ! -e "$WORKSPACE" ]]
            then
            WORKSPACE="."
            GOTPACKAGE=$(xcodebuild -workspace . -list | (grep Bluetooth-Package || true))
            if [[ $GOTPACKAGE != "" ]]
            then
            SCHEME="Bluetooth-Package"
            else
            SCHEME="Bluetooth"
            fi
            else
            SCHEME="Bluetooth-iOS"
            fi
            echo "set -o pipefail; export PATH='swift-latest:$PATH'; WORKSPACE='$WORKSPACE'; SCHEME='$SCHEME'" > setup.sh
        - name: Detect Workspace & Scheme (tvOS)
          run: |
            WORKSPACE="Bluetooth.xcworkspace"
            if [[ ! -e "$WORKSPACE" ]]
            then
            WORKSPACE="."
            GOTPACKAGE=$(xcodebuild -workspace . -list | (grep Bluetooth-Package || true))
            if [[ $GOTPACKAGE != "" ]]
            then
            SCHEME="Bluetooth-Package"
            else
            SCHEME="Bluetooth"
            fi
            else
            SCHEME="Bluetooth-tvOS"
            fi
            echo "set -o pipefail; export PATH='swift-latest:$PATH'; WORKSPACE='$WORKSPACE'; SCHEME='$SCHEME'" > setup.sh
        - name: Detect Workspace & Scheme (watchOS)
          run: |
            WORKSPACE="Bluetooth.xcworkspace"
            if [[ ! -e "$WORKSPACE" ]]
            then
            WORKSPACE="."
            GOTPACKAGE=$(xcodebuild -workspace . -list | (grep Bluetooth-Package || true))
            if [[ $GOTPACKAGE != "" ]]
            then
            SCHEME="Bluetooth-Package"
            else
            SCHEME="Bluetooth"
            fi
            else
            SCHEME="Bluetooth-watchOS"
            fi
            echo "set -o pipefail; export PATH='swift-latest:$PATH'; WORKSPACE='$WORKSPACE'; SCHEME='$SCHEME'" > setup.sh

